datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  name               String?
  role               Role                @default(USER)
  password           String
  questionnaires     Questionnaire[]
  responses          Response[]
  relaxationSessions RelaxationSession[]
  recommendations    Recommendation[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  companyId          String?             @db.ObjectId
  Company            Company?            @relation(fields: [companyId], references: [id])

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Questionnaire {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  questions   Question[]
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  responses   Response[]
  createdAt   DateTime   @default(now())
}

model Question {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  questionText    String
  questionnaireId String        @db.ObjectId
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  responses       Response[]
}

model Response {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  answer          String
  userId          String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  questionId      String         @db.ObjectId
  question        Question       @relation(fields: [questionId], references: [id])
  questionnaireId String?        @db.ObjectId
  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  createdAt       DateTime       @default(now())
}

model RelaxationSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int // durée en minutes
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Recommendation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Analytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  report    Json // un rapport qui pourrait être structuré en JSON
  companyId String   @db.ObjectId
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  employees User[]
  analytics Analytics[]
  createdAt DateTime    @default(now())
}
